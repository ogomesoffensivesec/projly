/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as ProjectsNewRouteImport } from './routes/projects/new'
import { Route as ProjectsSlugRouteImport } from './routes/projects/$slug'
import { Route as ProjectsIdRouteImport } from './routes/projects/$id'
import { Route as DashboardManagerRouteImport } from './routes/dashboard/manager'
import { Route as DashboardDevRouteImport } from './routes/dashboard/dev'
import { Route as AuthRequestAccessRouteImport } from './routes/auth/request-access'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthForgotPasswordRouteImport } from './routes/auth/forgot-password'
import { Route as DashboardDevIndexRouteImport } from './routes/dashboard/dev/index'
import { Route as ProjectsIdTasksRouteImport } from './routes/projects/$id/tasks'
import { Route as ProjectsIdScheduleRouteImport } from './routes/projects/$id/schedule'
import { Route as ProjectsIdEditRouteImport } from './routes/projects/$id/edit'
import { Route as DashboardDevUsersRouteImport } from './routes/dashboard/dev/users'
import { Route as DashboardDevSettingsRouteImport } from './routes/dashboard/dev/settings'
import { Route as DashboardDevProjectsRouteImport } from './routes/dashboard/dev/projects'
import { Route as DashboardDevOrganizationsRouteImport } from './routes/dashboard/dev/organizations'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsNewRoute = ProjectsNewRouteImport.update({
  id: '/projects/new',
  path: '/projects/new',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsSlugRoute = ProjectsSlugRouteImport.update({
  id: '/projects/$slug',
  path: '/projects/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIdRoute = ProjectsIdRouteImport.update({
  id: '/projects/$id',
  path: '/projects/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardManagerRoute = DashboardManagerRouteImport.update({
  id: '/dashboard/manager',
  path: '/dashboard/manager',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardDevRoute = DashboardDevRouteImport.update({
  id: '/dashboard/dev',
  path: '/dashboard/dev',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRequestAccessRoute = AuthRequestAccessRouteImport.update({
  id: '/auth/request-access',
  path: '/auth/request-access',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardDevIndexRoute = DashboardDevIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardDevRoute,
} as any)
const ProjectsIdTasksRoute = ProjectsIdTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => ProjectsIdRoute,
} as any)
const ProjectsIdScheduleRoute = ProjectsIdScheduleRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => ProjectsIdRoute,
} as any)
const ProjectsIdEditRoute = ProjectsIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ProjectsIdRoute,
} as any)
const DashboardDevUsersRoute = DashboardDevUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardDevRoute,
} as any)
const DashboardDevSettingsRoute = DashboardDevSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardDevRoute,
} as any)
const DashboardDevProjectsRoute = DashboardDevProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => DashboardDevRoute,
} as any)
const DashboardDevOrganizationsRoute =
  DashboardDevOrganizationsRouteImport.update({
    id: '/organizations',
    path: '/organizations',
    getParentRoute: () => DashboardDevRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/request-access': typeof AuthRequestAccessRoute
  '/dashboard/dev': typeof DashboardDevRouteWithChildren
  '/dashboard/manager': typeof DashboardManagerRoute
  '/projects/$id': typeof ProjectsIdRouteWithChildren
  '/projects/$slug': typeof ProjectsSlugRoute
  '/projects/new': typeof ProjectsNewRoute
  '/projects': typeof ProjectsIndexRoute
  '/dashboard/dev/organizations': typeof DashboardDevOrganizationsRoute
  '/dashboard/dev/projects': typeof DashboardDevProjectsRoute
  '/dashboard/dev/settings': typeof DashboardDevSettingsRoute
  '/dashboard/dev/users': typeof DashboardDevUsersRoute
  '/projects/$id/edit': typeof ProjectsIdEditRoute
  '/projects/$id/schedule': typeof ProjectsIdScheduleRoute
  '/projects/$id/tasks': typeof ProjectsIdTasksRoute
  '/dashboard/dev/': typeof DashboardDevIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/request-access': typeof AuthRequestAccessRoute
  '/dashboard/manager': typeof DashboardManagerRoute
  '/projects/$id': typeof ProjectsIdRouteWithChildren
  '/projects/$slug': typeof ProjectsSlugRoute
  '/projects/new': typeof ProjectsNewRoute
  '/projects': typeof ProjectsIndexRoute
  '/dashboard/dev/organizations': typeof DashboardDevOrganizationsRoute
  '/dashboard/dev/projects': typeof DashboardDevProjectsRoute
  '/dashboard/dev/settings': typeof DashboardDevSettingsRoute
  '/dashboard/dev/users': typeof DashboardDevUsersRoute
  '/projects/$id/edit': typeof ProjectsIdEditRoute
  '/projects/$id/schedule': typeof ProjectsIdScheduleRoute
  '/projects/$id/tasks': typeof ProjectsIdTasksRoute
  '/dashboard/dev': typeof DashboardDevIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/request-access': typeof AuthRequestAccessRoute
  '/dashboard/dev': typeof DashboardDevRouteWithChildren
  '/dashboard/manager': typeof DashboardManagerRoute
  '/projects/$id': typeof ProjectsIdRouteWithChildren
  '/projects/$slug': typeof ProjectsSlugRoute
  '/projects/new': typeof ProjectsNewRoute
  '/projects/': typeof ProjectsIndexRoute
  '/dashboard/dev/organizations': typeof DashboardDevOrganizationsRoute
  '/dashboard/dev/projects': typeof DashboardDevProjectsRoute
  '/dashboard/dev/settings': typeof DashboardDevSettingsRoute
  '/dashboard/dev/users': typeof DashboardDevUsersRoute
  '/projects/$id/edit': typeof ProjectsIdEditRoute
  '/projects/$id/schedule': typeof ProjectsIdScheduleRoute
  '/projects/$id/tasks': typeof ProjectsIdTasksRoute
  '/dashboard/dev/': typeof DashboardDevIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/request-access'
    | '/dashboard/dev'
    | '/dashboard/manager'
    | '/projects/$id'
    | '/projects/$slug'
    | '/projects/new'
    | '/projects'
    | '/dashboard/dev/organizations'
    | '/dashboard/dev/projects'
    | '/dashboard/dev/settings'
    | '/dashboard/dev/users'
    | '/projects/$id/edit'
    | '/projects/$id/schedule'
    | '/projects/$id/tasks'
    | '/dashboard/dev/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/request-access'
    | '/dashboard/manager'
    | '/projects/$id'
    | '/projects/$slug'
    | '/projects/new'
    | '/projects'
    | '/dashboard/dev/organizations'
    | '/dashboard/dev/projects'
    | '/dashboard/dev/settings'
    | '/dashboard/dev/users'
    | '/projects/$id/edit'
    | '/projects/$id/schedule'
    | '/projects/$id/tasks'
    | '/dashboard/dev'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/request-access'
    | '/dashboard/dev'
    | '/dashboard/manager'
    | '/projects/$id'
    | '/projects/$slug'
    | '/projects/new'
    | '/projects/'
    | '/dashboard/dev/organizations'
    | '/dashboard/dev/projects'
    | '/dashboard/dev/settings'
    | '/dashboard/dev/users'
    | '/projects/$id/edit'
    | '/projects/$id/schedule'
    | '/projects/$id/tasks'
    | '/dashboard/dev/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRequestAccessRoute: typeof AuthRequestAccessRoute
  DashboardDevRoute: typeof DashboardDevRouteWithChildren
  DashboardManagerRoute: typeof DashboardManagerRoute
  ProjectsIdRoute: typeof ProjectsIdRouteWithChildren
  ProjectsSlugRoute: typeof ProjectsSlugRoute
  ProjectsNewRoute: typeof ProjectsNewRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/new': {
      id: '/projects/new'
      path: '/projects/new'
      fullPath: '/projects/new'
      preLoaderRoute: typeof ProjectsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$slug': {
      id: '/projects/$slug'
      path: '/projects/$slug'
      fullPath: '/projects/$slug'
      preLoaderRoute: typeof ProjectsSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$id': {
      id: '/projects/$id'
      path: '/projects/$id'
      fullPath: '/projects/$id'
      preLoaderRoute: typeof ProjectsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/manager': {
      id: '/dashboard/manager'
      path: '/dashboard/manager'
      fullPath: '/dashboard/manager'
      preLoaderRoute: typeof DashboardManagerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/dev': {
      id: '/dashboard/dev'
      path: '/dashboard/dev'
      fullPath: '/dashboard/dev'
      preLoaderRoute: typeof DashboardDevRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/request-access': {
      id: '/auth/request-access'
      path: '/auth/request-access'
      fullPath: '/auth/request-access'
      preLoaderRoute: typeof AuthRequestAccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/dev/': {
      id: '/dashboard/dev/'
      path: '/'
      fullPath: '/dashboard/dev/'
      preLoaderRoute: typeof DashboardDevIndexRouteImport
      parentRoute: typeof DashboardDevRoute
    }
    '/projects/$id/tasks': {
      id: '/projects/$id/tasks'
      path: '/tasks'
      fullPath: '/projects/$id/tasks'
      preLoaderRoute: typeof ProjectsIdTasksRouteImport
      parentRoute: typeof ProjectsIdRoute
    }
    '/projects/$id/schedule': {
      id: '/projects/$id/schedule'
      path: '/schedule'
      fullPath: '/projects/$id/schedule'
      preLoaderRoute: typeof ProjectsIdScheduleRouteImport
      parentRoute: typeof ProjectsIdRoute
    }
    '/projects/$id/edit': {
      id: '/projects/$id/edit'
      path: '/edit'
      fullPath: '/projects/$id/edit'
      preLoaderRoute: typeof ProjectsIdEditRouteImport
      parentRoute: typeof ProjectsIdRoute
    }
    '/dashboard/dev/users': {
      id: '/dashboard/dev/users'
      path: '/users'
      fullPath: '/dashboard/dev/users'
      preLoaderRoute: typeof DashboardDevUsersRouteImport
      parentRoute: typeof DashboardDevRoute
    }
    '/dashboard/dev/settings': {
      id: '/dashboard/dev/settings'
      path: '/settings'
      fullPath: '/dashboard/dev/settings'
      preLoaderRoute: typeof DashboardDevSettingsRouteImport
      parentRoute: typeof DashboardDevRoute
    }
    '/dashboard/dev/projects': {
      id: '/dashboard/dev/projects'
      path: '/projects'
      fullPath: '/dashboard/dev/projects'
      preLoaderRoute: typeof DashboardDevProjectsRouteImport
      parentRoute: typeof DashboardDevRoute
    }
    '/dashboard/dev/organizations': {
      id: '/dashboard/dev/organizations'
      path: '/organizations'
      fullPath: '/dashboard/dev/organizations'
      preLoaderRoute: typeof DashboardDevOrganizationsRouteImport
      parentRoute: typeof DashboardDevRoute
    }
  }
}

interface DashboardDevRouteChildren {
  DashboardDevOrganizationsRoute: typeof DashboardDevOrganizationsRoute
  DashboardDevProjectsRoute: typeof DashboardDevProjectsRoute
  DashboardDevSettingsRoute: typeof DashboardDevSettingsRoute
  DashboardDevUsersRoute: typeof DashboardDevUsersRoute
  DashboardDevIndexRoute: typeof DashboardDevIndexRoute
}

const DashboardDevRouteChildren: DashboardDevRouteChildren = {
  DashboardDevOrganizationsRoute: DashboardDevOrganizationsRoute,
  DashboardDevProjectsRoute: DashboardDevProjectsRoute,
  DashboardDevSettingsRoute: DashboardDevSettingsRoute,
  DashboardDevUsersRoute: DashboardDevUsersRoute,
  DashboardDevIndexRoute: DashboardDevIndexRoute,
}

const DashboardDevRouteWithChildren = DashboardDevRoute._addFileChildren(
  DashboardDevRouteChildren,
)

interface ProjectsIdRouteChildren {
  ProjectsIdEditRoute: typeof ProjectsIdEditRoute
  ProjectsIdScheduleRoute: typeof ProjectsIdScheduleRoute
  ProjectsIdTasksRoute: typeof ProjectsIdTasksRoute
}

const ProjectsIdRouteChildren: ProjectsIdRouteChildren = {
  ProjectsIdEditRoute: ProjectsIdEditRoute,
  ProjectsIdScheduleRoute: ProjectsIdScheduleRoute,
  ProjectsIdTasksRoute: ProjectsIdTasksRoute,
}

const ProjectsIdRouteWithChildren = ProjectsIdRoute._addFileChildren(
  ProjectsIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRequestAccessRoute: AuthRequestAccessRoute,
  DashboardDevRoute: DashboardDevRouteWithChildren,
  DashboardManagerRoute: DashboardManagerRoute,
  ProjectsIdRoute: ProjectsIdRouteWithChildren,
  ProjectsSlugRoute: ProjectsSlugRoute,
  ProjectsNewRoute: ProjectsNewRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
